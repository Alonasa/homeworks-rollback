{"version":3,"sources":["Todolist.module.css","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Todolist","props","useState","title","setTitle","error","setError","changeFilterHandler","todolistId","value","changeFilter","addTaskHandler","addTask","trim","activeFilterHandler","filter","styles","filter__active","className","todo","todolist__title","onClick","removeTodolist","todo__title","onChange","e","currentTarget","onKeyPress","key","onKeypressHandler","type","error__message","todolist","tasks","map","t","id","isDone","task__done","checked","status","checkboxChange","removeTask","filters","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todlistId","filteredTasks","task","tl","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.61fb2f31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__1-YjK\",\"todolist__title\":\"Todolist_todolist__title__pXNXA\",\"todo__title\":\"Todolist_todo__title__1-5Ux\",\"error\":\"Todolist_error__3vSFZ\",\"error__message\":\"Todolist_error__message__2x7hl\",\"task__done\":\"Todolist_task__done__1nMVI\",\"filters\":\"Todolist_filters__3ZSzA\",\"filter\":\"Todolist_filter__3k1Lt\",\"filter__active\":\"Todolist_filter__active__2APwv\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport styles from './Todolist.module.css';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n  todolistId: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  removeTask: (taskId: string, todolistId: string) => void\r\n  changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n  addTask: (title: string, todolistId: string) => void\r\n  checkboxChange: (id: string, status: boolean, todolistId: string) => void\r\n  filter: FilterValuesType\r\n  removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n  const [title, setTitle] = useState('')\r\n  const [error, setError] = useState(false)\r\n  \r\n  const changeFilterHandler = (todolistId: string, value: FilterValuesType) => {\r\n\tprops.changeFilter(todolistId, value)\r\n  }\r\n  \r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\tsetTitle(e.currentTarget.value)\r\n\tsetError(false)\r\n  }\r\n  \r\n  const addTaskHandler = (todolistId: string) => {\r\n\tif (title) {\r\n\t  props.addTask(title.trim(), todolistId)\r\n\t  setTitle('')\r\n\t} else {\r\n\t  setError(true)\r\n\t}\r\n  }\r\n  \r\n  const onKeypressHandler = (e: KeyboardEvent<HTMLInputElement>, todolistId: string) => {\r\n\tif (e.key === 'Enter') {\r\n\t  addTaskHandler(todolistId)\r\n\t}\r\n  }\r\n  \r\n  const checkboxChangeHandler = (id: string, status: boolean, todolistId: string) => {\r\n\tprops.checkboxChange(id, status, todolistId)\r\n  }\r\n  \r\n  const activeFilterHandler = (filter: FilterValuesType) => {\r\n\treturn props.filter === filter ? styles.filter__active : styles.filter\r\n  }\r\n  \r\n  const onClickHandler = (id: string, todolistId: string) => {\r\n\tprops.removeTask(id, todolistId)\r\n  }\r\n  \r\n  const removeTodolistHandler = (todolistId: string) => {\r\n\tprops.removeTodolist(todolistId)\r\n  }\r\n  \r\n  return <div className={styles.todo}>\r\n\t<div className={styles.todolist__title}>\r\n\t  <h3>{props.title}</h3>\r\n\t  <button onClick={() => removeTodolistHandler(props.todolistId)}>x</button>\r\n\t</div>\r\n\t<div className={styles.todo__title}>\r\n\t  <input value={title} onChange={onChangeHandler}\r\n\t\t\t onKeyPress={(e)=>onKeypressHandler(e,props.todolistId)}\r\n\t\t\t className={error ? styles.error : ''} type={'text'}/>\r\n\t  <button onClick={() => addTaskHandler(props.todolistId)}>+</button>\r\n\t  {error &&\r\n      <span className={styles.error__message}>***Title is required</span>}\r\n\t</div>\r\n\t<ul className={styles.todolist}>\r\n\t  {\r\n\t\tprops.tasks.map(t => <li key={t.id}\r\n\t\t\t\t\t\t\t\t className={t.isDone ? styles.task__done : ''}>\r\n\t\t  <input type=\"checkbox\" checked={t.isDone}\r\n\t\t\t\t onChange={(e: ChangeEvent<HTMLInputElement>) => checkboxChangeHandler(t.id, e.currentTarget.checked, props.todolistId)}/>\r\n\t\t  <span>{t.title}</span>\r\n\t\t  <button onClick={() => onClickHandler(t.id, props.todolistId)}>x\r\n\t\t  </button>\r\n\t\t</li>)\r\n\t  }\r\n\t</ul>\r\n\t<div className={styles.filters}>\r\n\t  <button className={activeFilterHandler('all')}\r\n\t\t\t  onClick={() => changeFilterHandler(props.todolistId, 'all')}>\r\n\t\tAll\r\n\t  </button>\r\n\t  <button className={activeFilterHandler('active')}\r\n\t\t\t  onClick={() => changeFilterHandler(props.todolistId, 'active')}>\r\n\t\tActive\r\n\t  </button>\r\n\t  <button className={activeFilterHandler('completed')}\r\n\t\t\t  onClick={() => changeFilterHandler(props.todolistId, 'completed')}>\r\n\t\tCompleted\r\n\t  </button>\r\n\t</div>\r\n  </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\ntype TodolistsType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n  let todolistId1 = v1();\r\n  let todolistId2 = v1();\r\n  \r\n  let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n\t{id: todolistId1, title: 'What to learn', filter: 'all'},\r\n\t{id: todolistId2, title: 'What to buy', filter: 'all'},\r\n  ])\r\n  \r\n  let [tasks, setTasks] = useState<TasksStateType>({\r\n\t[todolistId1]: [\r\n\t  {id: v1(), title: 'HTML&CSS', isDone: true},\r\n\t  {id: v1(), title: 'JS', isDone: true},\r\n\t  {id: v1(), title: 'ReactJS', isDone: false},\r\n\t  {id: v1(), title: 'Rest API', isDone: false},\r\n\t  {id: v1(), title: 'GraphQL', isDone: false},\r\n\t],\r\n\t[todolistId2]: [\r\n\t  {id: v1(), title: 'HTML&CSS2', isDone: true},\r\n\t  {id: v1(), title: 'JS2', isDone: true},\r\n\t  {id: v1(), title: 'ReactJS2', isDone: false},\r\n\t  {id: v1(), title: 'Rest API2', isDone: false},\r\n\t  {id: v1(), title: 'GraphQL2', isDone: false},\r\n\t]\r\n  });\r\n  \r\n  function removeTask(id: string, todlistId: string) {\r\n\tlet filteredTasks = tasks[todlistId].filter(t => t.id !== id);\r\n\tsetTasks({...tasks, [todlistId]: filteredTasks});\r\n  }\r\n  \r\n  function changeFilter(todolistId: string, value: FilterValuesType) {\r\n\tsetTodolists(todolists.map(t => t.id === todolistId ? {\r\n\t  ...t,\r\n\t  filter: value\r\n\t} : t))\r\n  }\r\n  \r\n  const addTask = (title: string, todolistId: string) => {\r\n\tlet task: TaskType = {id: v1(), title: title, isDone: false}\r\n\tsetTasks({...tasks, [todolistId]: [task, ...tasks[todolistId]]})\r\n  }\r\n  \r\n  const checkboxChange = (id: string, status: boolean, todolistId: string) => {\r\n\tsetTasks({\r\n\t  ...tasks,\r\n\t  [todolistId]: tasks[todolistId].map(t => t.id === id ? {\r\n\t\t...t,\r\n\t\tisDone: status\r\n\t  } : t)\r\n\t})\r\n  }\r\n  \r\n  const removeTodolist = (todolistId: string) => {\r\n  \tdelete tasks[todolistId]\r\n\tsetTasks(tasks)\r\n\tsetTodolists(todolists.filter(tl => tl.id !== todolistId))\r\n  }\r\n  \r\n  return (\r\n\t<div className=\"App\">\r\n\t  {todolists.map(t => {\r\n\t\tlet tasksForTodolist = tasks[t.id];\r\n\t\t\r\n\t\tif (t.filter === 'active') {\r\n\t\t  tasksForTodolist = tasks[t.id].filter(t => !t.isDone);\r\n\t\t}\r\n\t\tif (t.filter === 'completed') {\r\n\t\t  tasksForTodolist = tasks[t.id].filter(t => t.isDone);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t  <Todolist key={t.id}\r\n\t\t\t\t\ttodolistId={t.id}\r\n\t\t\t\t\ttitle={t.title}\r\n\t\t\t\t\ttasks={tasksForTodolist}\r\n\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\tchangeFilter={changeFilter}\r\n\t\t\t\t\taddTask={addTask}\r\n\t\t\t\t\tcheckboxChange={checkboxChange}\r\n\t\t\t\t\tfilter={t.filter}\r\n\t\t\t\t\tremoveTodolist={removeTodolist}\r\n\t\t  />\r\n\t\t)\r\n\t  })}\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}